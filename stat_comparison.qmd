---
title: "Stat approaches for network generation"
format: html
editor: visual
---

# Libraries

```{r Libraries}
library(openxlsx)
library(here)
library(limma)
library(dplyr)
library(tibble)
library(janitor)
library(ggplot2)
library(rbioapi)
library(OmnipathR)
library(purrr)
library(org.Hs.eg.db)
library(clusterProfiler)
library(stringr)
library(readr)
library(proxyC)
```

# Loading tables from QproMS and Protein Groups

```{r Loading table}
mn_proteome<- data.table::fread(here::here("proteinGroups_sqstm1.txt")) %>%
janitor::clean_names() %>%
dplyr::filter(potential_contaminant != "+" &
only_identified_by_site != "+" &
reverse != "+") %>%
dplyr::select(protein_i_ds,
dplyr::starts_with("i_baq_")
) %>%
dplyr::mutate(protein_i_ds = stringr::str_extract(protein_i_ds, "[^;]*")) %>%
dplyr::select(-c(i_baq_peptides,i_baq_mn5)) %>%
tidyr::pivot_longer(!protein_i_ds, names_to = "label", values_to = "ibaq") %>%
dplyr::mutate(value = if_else(ibaq == 0, 0, 1)) %>%
dplyr::mutate(condition= if_else(stringr::str_detect(label, "i_baq_mn"), "mnuc", "nuc")) %>%
dplyr::group_by(protein_i_ds, condition) %>%
dplyr::mutate(sumvalue = sum(value)) %>%
dplyr::filter(sumvalue >= 3) %>%
dplyr::mutate(ibaq= log2(ibaq)) %>%
dplyr::mutate(ibaq = if_else(ibaq == -Inf, 0, ibaq)) %>%
dplyr::summarise(mean_ibaq= round(mean(ibaq, na.rm=TRUE), 3)) %>%
dplyr::ungroup() %>% 
tidyr::pivot_wider(id_cols = protein_i_ds, names_from = "condition", values_from = "mean_ibaq") %>%
dplyr::mutate(mnuc = if_else(is.na(mnuc), 0, mnuc)) %>%
dplyr::mutate(nuc = if_else(is.na(nuc), 0, nuc))


# write.table(mn_proteome %>% dplyr::select(-mnuc),file ="/Users/giorgiacucina/Desktop/nuc_proteome.tsv", quote = FALSE, sep = "\t", row.names = FALSE, col.names = FALSE)

# apex <-
#   data.table::fread(here::here("proteinGroups_APEX_P62.txt")) %>%
#   janitor::clean_names() %>%
#   dplyr::filter(potential_contaminant != "+" &
#                   only_identified_by_site != "+" &
#                   reverse != "+") %>%
#   dplyr::select(protein_i_ds,
#                 gene_names,
#                 dplyr::starts_with("i_baq_apexp62"),
#                 dplyr::starts_with("i_baq_apexonly")) %>%
#   dplyr::mutate(protein_i_ds = stringr::str_extract(protein_i_ds, "[^;]*")) %>%
#   dplyr::mutate(gene_names = stringr::str_extract(gene_names, "[^;]*")) %>%
#   dplyr::mutate(gene_names = dplyr::if_else(gene_names == "",
#                                             protein_i_ds,
#                                             gene_names)) %>%
#   dplyr::select(-gene_names) %>% 
# tidyr::pivot_longer(!protein_i_ds, names_to = "label", values_to = "ibaq") %>% 
# dplyr::mutate(value = if_else(ibaq == 0, 0, 1)) %>%
# dplyr::group_by(protein_i_ds) %>% 
# dplyr::mutate(sumvalue = sum(value)) %>%
# dplyr::filter(sumvalue >= 3) %>%
#   dplyr::mutate(ibaq= round(log2(ibaq), 3)) %>%
# dplyr::mutate(ibaq = if_else(ibaq == -Inf, 0, ibaq)) %>%
#   dplyr::mutate(mean_ibaq= mean(ibaq, na.rm=TRUE)) %>% 
#   dplyr::group_by(mean_ibaq) %>% 
# tidyr::pivot_wider(id_cols = protein_i_ds, names_from = "label", values_from = "ibaq") 

limma <- openxlsx::read.xlsx(xlsxFile = "/Users/giorgiacucina/QProMS_functions.git/Imputed_table_2023-09-19.xlsx")

perseus <-
  data.table::fread(file = "/Users/giorgiacucina/QProMS_functions.git/welch_permutation.txt", sep = "\t") %>%
  janitor::clean_names() %>%
  dplyr::select(dplyr::contains("apex"), gene_names) %>%
  dplyr::slice(3:n()) %>%
  dplyr::filter(welchs_t_test_significant_apexonly_apexp62 == "+") %>%
  dplyr::filter(welchs_t_test_difference_apexonly_apexp62 < 0) %>% #abbiamo sbagliato il confronto, quindi le negative sono quelle di interesse
  dplyr::mutate(gene_names = sub(";.*", "", gene_names)) %>%
  dplyr::select(gene_names, p_val = log_welchs_t_test_p_value_apexonly_apexp62, log_fc =
                  welchs_t_test_difference_apexonly_apexp62) 
  # write.table(file = "/Users/giorgiacucina/Desktop/perseus_nodes.txt")

welch_bh <-
  openxlsx::read.xlsx(xlsxFile = "/Users/giorgiacucina/QProMS_functions.git/Univariate_table_2023-09-19.xlsx") %>%
  dplyr::filter(apexp62_vs_apexonly_significant) %>%
  dplyr::filter(apexp62_vs_apexonly_fold_change > 0)  
```

# LIMMA

```{r LIMMA}
limma_matrix <-
  limma %>% tibble::column_to_rownames("gene_names") %>%
  as.matrix()

group_list <- factor(x=c("apex","apex","apex","apex","apex", "only","only","only","only","only"), levels = c("apex", "only"))

design <- model.matrix(~group_list)
limma_fit <- limma::lmFit(limma_matrix, design) 
fit <- eBayes(limma_fit)
limma_tibble<- topTable(fit, number = nrow(limma)) %>% tibble::rownames_to_column("gene_names") %>%
  dplyr::filter(adj.P.Val<0.05) %>% 
  dplyr::filter(logFC>0) %>% 
  dplyr::mutate(p_adj= -log10(adj.P.Val)) %>% 
  dplyr::mutate(gene_names= stringr::str_replace(gene_names, "_.*", ""))

 # limma_tibble %>% write.table(file = "/Users/giorgiacucina/Desktop/limma_nodes.txt",quote = FALSE,sep = "\t", row.names = FALSE)
```

# STRING db

```{r Stringdb upload}
gene_names <-
  data.table::fread(here::here("9606.protein.info.v12.0.txt")) %>%
  dplyr::select(string_protein_id, preferred_name)

human_string <-
  data.table::fread(here::here("9606.protein.links.detailed.v12.0.txt")) %>%
  dplyr::mutate(score = combined_score / 1000,
                escore = experimental / 1000,
                dscore = database / 1000) %>%
  dplyr::left_join(gene_names, by = c("protein1" = "string_protein_id")) %>%
  dplyr::rename("source" = "preferred_name") %>%
  dplyr::left_join(gene_names, by = c("protein2" = "string_protein_id")) %>%
  dplyr::rename("target" = "preferred_name") %>%
  dplyr::mutate(score1 = (escore - 0.041) * (1 - 0.041)) %>%
  dplyr::mutate(score2 = (dscore - 0.041) * (1 - 0.041)) %>%
  dplyr::mutate(score_combin = 1 - (1 - score1) * (1 - score2)) %>%
  dplyr::mutate(re_score = score_combin + 0.041 * (1 - score_combin)) %>%
  dplyr::mutate(re_score = round(re_score, 3)) %>%
  dplyr::mutate(re_score= if_else(re_score<0, 0, re_score)) %>% 
  dplyr::select(source, target, score, re_score)
```

```{r All the functions}
string_find_interactors <- function(table, score=400, limits=NULL) {
  
  gene_list <- table %>%
    dplyr::pull(gene_names)
  
  data <-
    rba_string_interaction_partners(
      ids = gene_list,
      species = 9606,
      required_score = score,
      limit = limits
    ) %>%
    dplyr::select(source = preferredName_A, target = preferredName_B, score) %>% #Real vs predicted instead of source and target
    unique() # GUARDA QUI
  return(data)
}

predicted_node_table <- function(predicted_table_interactors, table) {
  predict <- predicted_table_interactors %>%
    dplyr::count(target) %>%
    pull(target)
  
  sperimental <- table %>%
    pull(gene_names)
  
  nodes_predicted_all <- c(predict, sperimental)
  
  nodes_predicted <- unique(nodes_predicted_all)
  
  return(nodes_predicted)
}

corum_edges <- function(predicted_list) {

raw_corum_table <-
    get_complex_genes(import_omnipath_complexes(resources = "CORUM"),
                      predicted_list,
                      total_match = FALSE) %>%
    unique() %>%
    dplyr::select(name, components_genesymbols) %>%
    tidyr::separate_rows(components_genesymbols, sep = "_") %>%
    dplyr::filter(components_genesymbols %in% predicted_list) %>%
    unique() %>% 
    get_dupes(name)

    expand_nodes <- raw_corum_table %>%
      dplyr::group_by(name) %>%
      dplyr::group_map( ~ dplyr::pull(.x, components_genesymbols)) 
    
    edges_corum_table <-
      purrr::map(.x = expand_nodes, .f = ~ as.data.frame(t(combn(.x, 2)))) %>% 
      purrr::reduce(dplyr::bind_rows) %>% 
      dplyr::rename(target = V1,  source = V2) %>%
      dplyr::left_join(raw_corum_table, by = c("source" = "components_genesymbols")) %>% 
      dplyr::select(-dupe_count) %>% 
      dplyr::select(source, target) %>%
      unique() %>% 
      dplyr::mutate(source_target = paste0(source, "_", target)) %>%
      dplyr::mutate(target_source = paste0(target, "_", source))
    
    return(edges_corum_table)
}

roc_precision_data <- function(corum_table, string_predicted_interactors) {
  
    data <- string_predicted_interactors %>%
      dplyr::select(-score) %>% 
      dplyr::mutate(
        corum = case_when(
          source_target %in% corum_table$source_target ~ 1,
          source_target %in% corum_table$target_source ~ 1,
          TRUE ~ 0
        )
      )
    
    df <- tibble::tibble()
    
    for (i in seq(from = 1, to = 0, by = -0.10)) {
      string_thr <- data %>%
        dplyr::mutate(thr = if_else(re_score >= i, "yes", "no")) #Vedo quali interazioni di String sono anche in CORUM (TP)
      
      for (j in 1:10) {
        set.seed(j)
        source <-
          sample(
            string_thr$source,
            size = sum(string_thr$corum == 1),
            replace = TRUE
          )
        target <-
          sample(
            string_thr$target,
            size = sum(string_thr$corum == 1),
            replace = TRUE
          )
        
        random_int <- cbind(source, target) %>%
          as.data.frame() %>%
          dplyr::left_join(human_string, by = join_by(source, target)) %>%
          dplyr::mutate(re_score = dplyr::if_else(is.na(re_score), 0, re_score)) %>% 
          dplyr::select(-score)
        
        df_1 <-
          tibble::tibble(
                    TP = sum(string_thr$thr == "yes" & string_thr$corum == 1),
                    FN = sum(string_thr$thr == "no" & string_thr$corum == 1),
                    TPR = TP / (TP + FN),
                    FP = sum(random_int$re_score >= i),
                    TN = sum(random_int$re_score < i),
                    FPR = FP / (FP + TN),
                    STRINGSCORE = i,
                    fold = j
                  )  
        
        df <- rbind(df, df_1)
        
      }
    }
    
    
    df_final <- df %>%
      dplyr::mutate(P = TP / (TP + FP)) %>%
      dplyr::group_by(STRINGSCORE) %>%
      dplyr::summarise(
        FPR_mean = mean(FPR),
        FPR_sd = sd(FPR),
        TPR_mean = mean(TPR),
        TPR_sd = sd(TPR),
        P_mean = mean(P),
        P_sd = sd(P)
      ) 
    return(df_final)
        print(df_final)
}

roc_precision_graph <- function(data, graph) {
  if (graph=="roc") {
    p1 <- ggplot2::ggplot(data, aes(
      x = FPR_mean,
      y = TPR_mean,
      color = as.factor(STRINGSCORE)
    )) +
      geom_point() +
      geom_line()+
      labs(x = "False Positive Rate",
           y = "True Positive Rate",
           title = "ROC Curve")  +
      geom_abline(slope = 1, linetype = "dashed") +
      geom_errorbar(aes(xmin = FPR_mean - FPR_sd,
                        xmax = FPR_mean + FPR_sd),
                    color = "black") +
      geom_rect(aes(
        xmin = 0,
        xmax = 0.2,
        ymin = 0.7,
        ymax = 1
      ),
      color = "darkgrey",
      alpha = 0)
    
    p2 <- ggplot2::ggplot(data, aes(
      x = FPR_mean,
      y = TPR_mean,
      color = as.factor(STRINGSCORE)
    )) +
      geom_point() +
        geom_errorbar(aes(xmin = FPR_mean - FPR_sd,
                        xmax = FPR_mean + FPR_sd),
                    color = "black")+
  xlim(0, 0.2)+
  ylim(0.7, 1)+
  theme_bw() +
  theme(
    axis.title = element_blank(), legend.position = "none"
  )
    p<- p1 + 
  # xmin, xmax, ymin, ymax represent the position and dimension of the zoomed plot
  annotation_custom(ggplotGrob(p2), xmin = 0.6, xmax = 1, ymin = 0, ymax = 0.5) +
  # this geom_rect() draws the border dashed line of the zoomed plot
  geom_rect(aes(xmin = 0.6, xmax = 1, ymin = 0, ymax = 0.5), color='darkgrey', alpha=0)
      
  }else {
    p <- ggplot2::ggplot(data, aes(
      x = TPR_mean,
      y = P_mean,
      color = as.factor(STRINGSCORE)
    )) +
      geom_point() +
      geom_errorbar(aes(ymin = P_mean - P_sd,
                        ymax = P_mean + P_sd),
                    color = "black") +
      labs(x = "Recall",
           y = "Precision",
           title = "Precision-Recall Curve")
  }
  
  p<-p +
    geom_line(color = "black") +
      guides(color = guide_legend(title = "StringScore")) +
      ylim(0, 1) +
      xlim(0, 1) +
  theme_bw()
  return(p)
}

enrichment_table <- function(predicted_table_interactors, thr, ontology, simplify_thr, table) {
  
  roc_filtered <- predicted_table_interactors %>% 
    dplyr::filter(re_score>=thr) %>% 
    dplyr::count(target) %>%
    pull(target)
  
  sperimental <- table %>%
    pull(gene_names)
  
  nodes_predicted_all <- c(roc_filtered, sperimental)
  
  nodes_roc_filtered <- unique(nodes_predicted_all)
  
  enrich <-
    enrichGO(nodes_roc_filtered,
      OrgDb = org.Hs.eg.db,
      keyType= "SYMBOL",
      ont = ontology,
      pAdjustMethod = "BH",
      pvalueCutoff = 0.05
    ) %>%
    setReadable(OrgDb = org.Hs.eg.db) %>%
    simplify(., cutoff = simplify_thr,
             by = "p.adjust") 
  
  
    GO <- enrich@result %>%
    
    dplyr::select(Description, GeneRatio, BgRatio, pvalue, qvalue, geneID, Count) %>% 
    tidyr::separate_rows(geneID, sep = "/") %>%
    dplyr::mutate(experimental = if_else(geneID %in% table$gene_names, 1, 0)) %>%
    dplyr::group_by(Description) %>%
    dplyr::mutate(exp = sum(experimental == 1)) %>%
    dplyr::mutate(ratio = exp / Count) %>%
    dplyr::arrange(desc(ratio), qvalue) %>%
    tidyr::separate(GeneRatio,
                    into = c("a", "b"),
                    sep = "/",
                    remove = FALSE) %>%
    tidyr::separate(BgRatio,
                    into = c("c", "d"),
                    sep = "/",
                    remove = FALSE) %>%
    dplyr::mutate(fold_enrichment = (as.numeric(a) / as.numeric(b)) /
                    (as.numeric(c) / as.numeric(d))) %>%
    dplyr::select(-c(a, b, c, d)) %>%
    dplyr::mutate(geneID_sperimental = if_else(experimental == 1, geneID, "")) %>%
    dplyr::mutate(geneID_predicted = if_else(experimental == 0, geneID, "")) %>%
    dplyr::select(-experimental) %>% #To improve.
    dplyr::ungroup() %>%
    tidyr::nest(gene_names = c(geneID_predicted, geneID_sperimental, geneID)) %>%
    tidyr::unnest_wider(gene_names)
  
  return(GO)
}

string_exp_int <- function(table) {
  gene_list <- table %>%
    dplyr::pull(gene_names)
  
  data <-
    rba_string_interactions_network(ids = gene_list,
                                    species = 9606,
                                    required_score = 400) %>%
    dplyr::select(source = preferredName_A, target = preferredName_B, score, escore, dscore) 
  
  rescoring <- data %>% 
    dplyr::mutate(score1 = (escore - 0.041) * (1 - 0.041)) %>%
    dplyr::mutate(score2 = (dscore - 0.041) * (1 - 0.041)) %>%
    dplyr::mutate(score_combin = 1 - (1 - score1) * (1 - score2)) %>%
    dplyr::mutate(re_score = score_combin + 0.041 * (1 - score_combin)) %>%
    dplyr::mutate(re_score = round(re_score, 3)) %>%
    dplyr::mutate(source_target = paste0(source, "_", target)) %>%
    dplyr::mutate(target_source = paste0(target, "_", source)) %>%
    dplyr::distinct(source_target, .keep_all = TRUE) %>% 
    dplyr::select(source, target, score, re_score, source_target, target_source)
  return(rescoring)
}

ideal_score <- function(roc_table, error_rate=0.05){
  data <- roc_table %>% 
  dplyr::select(score=STRINGSCORE, FPR=FPR_mean) %>% 
  dplyr::filter(FPR<error_rate) %>% 
  pull(score)
  
  return(data)
}
```

```{r LIMMA analysis}
interactors <-
  string_find_interactors(table = limma_tibble, score = 400, limits = NULL) %>%   #Trovo tutti i primi interattori della nostra lista sperimetnale
# interactors %>% write.table(file = "/Users/giorgiacucina/Desktop/limma_interactors.txt")
dplyr::left_join(limma_tibble, by=c("source"="gene_names")) %>% 
  dplyr::left_join(protein_groups, by=c("target"="gene_names"))

nodes <- string_find_interactors(table = limma_tibble, score = 800, limits = NULL) %>%  dplyr::distinct(target) 

predicted_nodes <-
  predicted_node_table(predicted_table_interactors = interactors, table = limma_tibble) %>% 
  

  #Lista di tutti i nodi sperimentali e predetti

limma_all_predicted <- interactors %>% 
  dplyr::filter(score>=0.4) %>% 
  pull(target) #Pull di tutti i nodi predetti

stringdb_filtered<- human_string %>% 
  dplyr::filter(combined_score>=0.4) %>% 
  dplyr::mutate(int= if_else(source %in% limma_all_predicted & target %in% limma_all_predicted, 1, 0), source_target = paste0(source, "_", target),target_source = paste0(target, "_", source)) %>% 
  dplyr::filter(int==1) %>% 
  dplyr::rename(score=combined_score) %>% 
  unique() #Trovo le interazioni tra i nodi predetti da StringDB
  
limma_all <- interactors %>% 
  dplyr::bind_rows(stringdb_filtered)#Tabella finale con tutte le interazioni tra tutti i nodi sperimentali e predetti


limma_roc_filtered  %>% dplyr::filter(is.na(logFC)) %>% dplyr::distinct(source) %>% nrow()
  
  
corum <- corum_edges(predicted_list = predicted_nodes)


limma_roc_table <- roc_precision_data(corum_table = corum, string_predicted_interactors = limma_all)

roc_precision_graph(data = limma_roc_table, graph = "roc")


limma_roc_filtered <- limma_all %>% 
  dplyr::select(-int, -source_target, -target_source) %>% 
dplyr::filter(score>=0.8)


 # limma_all %>% write.table(file = "/Users/giorgiacucina/Desktop/limma_all.txt")

limma_enrichment <- enrichment_table(predicted_table_interactors = interactors, thr = 0.8, simplify_thr = 0.7, table = limma_tibble)

# limma_enrichment %>% write.table(file = "/Users/giorgiacucina/Desktop/limma_enrichment.txt")


limma_cluster <- read.csv(file = "/Users/giorgiacucina/Desktop/Phag+ESCRT filtered default  node.csv") %>% 
  dplyr::mutate(sperimental= if_else(is.na(adj_p_val), 0, 1)) %>% 
  dplyr::select(sperimental, name)

pred_node<- limma_cluster %>% 
  dplyr::filter(sperimental==0) %>% 
  dplyr::left_join(protein_groups, by=c("name"="gene_names")) %>% 
  # dplyr::select(-protein_i_ds) %>% 
  dplyr::rename(gene_names=name) %>% 
  dplyr::mutate(FC_intensity=if_else(is.na(intensity), 0, -intensity)) %>%
  dplyr::select(gene_names, FC_intensity, sperimental)
                
list<-limma_cluster %>% 
  dplyr::filter(sperimental==1) %>% pull(name)

complete_nodes_cluster <- limma_tibble %>% 
  dplyr::filter(gene_names %in% list) %>% 
  dplyr::select(gene_names, logFC) %>% 
  dplyr::mutate(sperimental=1) %>% 
  dplyr::rename(FC_intensity=logFC) %>% 
  bind_rows(pred_node) 

 # complete_nodes_cluster %>% write.table(file = "/Users/giorgiacucina/Desktop/limma_cluster_node.txt", quote = FALSE,sep = "\t", row.names = FALSE)



limma_int_cluster <- human_string %>% 
  dplyr::filter(combined_score>=0.8) %>% 
  dplyr::mutate(int= if_else(source %in% limma_cluster$name & target %in% limma_cluster$name, 1, 0)) %>% 
    dplyr::filter(int==1) %>% 
  dplyr::select(-int) %>% 
  tidyr::unite("stringID", source:target, remove = TRUE) %>% 
  dplyr::distinct(stringID, .keep_all = TRUE) %>% 
  dplyr::rename(score=combined_score) %>% 
tidyr::separate(stringID, c("source", "target")) %>% 
  dplyr::left_join(limma_tibble, by=c("source"="gene_names")) %>% 
  dplyr::left_join(protein_groups, by=c("target"="gene_names")) %>% 
  dplyr::select(-protein_i_ds) %>% 
  dplyr::mutate(sperimental= if_else(is.na(logFC), "N", "Y")) %>% 
  dplyr::select(source, target, score)
  
   # limma_int_cluster %>% write.table(file = "/Users/giorgiacucina/Desktop/limma_cluster.txt", quote = FALSE,sep = "\t", row.names = FALSE)
```

```{r Proteome MN- Limma statistics }
# Applied limma statistics to the micronuclei proteome
mn_limma<- openxlsx::read.xlsx(xlsxFile = "Univariate_table_2023-10-20.xlsx") %>% 
  dplyr::filter(mnuc_vs_nuc_significant) %>% 
  dplyr::filter(mnuc_vs_nuc_fold_change>0) #Only selected significant upregulated

#Find all the interaction between our significant
mn_limma_int <- human_string %>% 
  dplyr::mutate(int= if_else(source %in% mn_limma$gene_names & target %in% mn_limma$gene_names, 1, 0), source_target = paste0(source, "_", target),target_source = paste0(target, "_", source)) %>% 
  dplyr::filter(int==1) %>% 
  dplyr::select(-int) 

#Find interactions in CORUM
mn_limma_corum <- corum_edges(predicted_list = mn_limma$gene_names)

#Build the table to calculate the FPR of the scores
mn_limma_roc_table <- roc_precision_data(corum_table = mn_limma_corum, string_predicted_interactors = mn_limma_int)
roc_precision_graph(data = mn_limma_roc_table, graph = "roc")

ideal_score(roc_table = mn_limma_roc_table, error_rate = 0.01)

filt_mn <- mn_limma_int %>% dplyr::filter(re_score>=0.7)

#Enrichment analysis of the filtered table by FPR<0.05
mn_limma_enrichment <- enrichment_table(predicted_table_interactors = mn_limma_int, thr = 0.8, ontology = "CC", simplify_thr = 0.8, table = mn_limma)  
```

```{r BH analysis}
interactors <-
  string_find_interactors(table = welch_bh)

predicted_nodes <-
  predicted_node_table(predicted_table_interactors = interactors, table = welch_bh)

corum <- corum_edges(predicted_list = predicted_nodes)

bh_roc_table <- roc_precision_data(corum_table = corum, string_predicted_interactors = interactors)

p2<-roc_precision_graph(data = bh_roc_table, graph = "roc")
p2

bh_enrichment <- enrichment_table(predicted_table_interactors = interactors, thr = 0.9, table = welch_bh)

```

```{r Limma only experimental}
limma_string <- string_exp_int(table = limma_tibble)
# limma_string %>% write.table(file = "/Users/giorgiacucina/Desktop/limma_string.txt")

corum_interactions <- corum_edges(predicted_list = limma_tibble %>%  pull(gene_names))

limma_exp_roc <- roc_precision_data(corum_table = corum_interactions, string_predicted_interactors = limma_string)
roc_precision_graph(data = limma_exp_roc, graph = "roc")




limma_exp_enrich<- enrichment_table(predicted_table_interactors = limma_string, thr = 0.9, ontology = "CC", simplify_thr = 0.8, table = limma_tibble)
```

```{r Perseus analysis}
interactors <-
  string_find_interactors(table = perseus)
# interactors %>% write.table(file = "/Users/giorgiacucina/Desktop/perseus_interactors.txt")

predicted_nodes <-
  predicted_node_table(predicted_table_interactors = interactors, table = perseus)

corum <- corum_edges(predicted_list = predicted_nodes)

perseus_roc_table <- roc_precision_data(corum_table = corum, string_predicted_interactors = interactors)

p1 <- roc_precision_graph(data = perseus_roc_table, graph = "roc")
p1

perseus_enrichment <- enrichment_table(predicted_table_interactors = interactors, thr = 0.9, simplify_thr = 0.7, table = perseus)

```

```{r CORUM interactors}
node_table <- function(table) {
  predict <- table %>%
    dplyr::count(target) %>%
    pull(target)
  
  sperimental <- table %>%
   dplyr::count(source) %>%
    pull(source)
  
  nodes_predicted_all <- c(predict, sperimental)
  
  nodes_predicted <- unique(nodes_predicted_all)
  
  return(nodes_predicted)
}

corum_nodes <- node_table(table=corum_interactions) %>% as.data.frame() %>% dplyr::mutate(gene_names= node_table(table=corum_interactions))
corum_predicted <- string_find_interactors(table = corum_nodes, score = 900)
# corum_predicted %>% write.table(file = "/Users/giorgiacucina/Desktop/corum_predicted.txt")

corum_limma_enrich <- enrichment_table(predicted_table_interactors = corum_predicted, thr = 0.4, simplify_thr = 0.7, table = corum_nodes)

```


```{r}



```
